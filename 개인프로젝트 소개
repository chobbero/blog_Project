# blog_Project

2019 01 25
ITWILL 부산교육센터 스마트웹 하이브리드앱 자바 개발자 양성과정 (2018 10 15 ~ 2019 04 08)


개인 프로젝트 (홈페이지 제작)
개발기간 : 2018 01 03 ~ 2018 01 23
발표일 : 2018 01 24

////////////////////////////////////////////// 개인프로젝트 개발 필수 목표 /////////////////////////////////////////////////////

회원가입 구현 v
로그인 구현 v
회원정보수정 구현 v
게시판 구현 v
우편번호검색 구현 v
자료실 구현 v
갤러리게시판 구현 v
메일보내기 구현 v
댓글달기 구현 v
추가기능 구현 v

///////////////////////////////////////////////////// 프로젝트 경과 ///////////////////////////////////////////////////////////

1/3 
블로그 제작을 목표로 시작
회원 정보DB 생성

1/4
회원 가입 로그인 로그아웃 구현

1/5
회원 가입 페이지 세부 조정 (정규표현식) 및 항목 추가 (우편번호 API)

1/7
회원 정보 수정, 비밀번호 재확인 구현

1/8
자유게시판DB 생성 및 자유게시판 글쓰기 구현

1/9
자유게시판 목록, 글 내용 보기, 헤더 분리

1/10
css작업

1/11
글 삭제, 회원 정보 삭제 구현

1/13
자유게시판 글 검색 기능, 글 삭제시 비밀번호 확인?, footer 분리,
댓글 DB 생성 및 일부 자유게시판 DB변경

1/14
자료실, 자료실 글쓰기, 자료실 댓글 기능, 파일 업로드,
자료실 DB생성

1/15
css 및 세부조정

1/16
갤러리 게시판 시작
갤러리 게시판 DB생성

1/17
갤러리 게시판 글쓰기, 글목록, 글내용 보기 구현

1/18 ~ 20
갤러리 게시판 CSS 및 수정 작업..

1/21
갤러리 게시판 글 수정 및 원글 삭제시 댓글 삭제 구현

1/22
블로그에서 => 영화 예매 사이트로 변경 

갤러리 게시판을 영화 소개 페이지로 변경 및 영화 DB 생성

1/23
영화 한줄평 DB생성 및 구현
예매 관련 DB 생성 (상영관, 좌석, 예매) 관련 페이지 생성
이메일 네이버SMTP 사용하여 구현.(현재 네이버 비밀번호 변경으로 사용불가)

1/24
영화 DB 설계 미흡으로 실패; 
엉성한 예매 페이지 완성
////////개인 프로젝트 발표////////

회원 가입시 주소 미입력후 가입버튼 누를시 페이지 넘어가던 문제 수정


1/25

영화관 예매 설계 


상영관이 영화 해당기간 동안 사용중이면 선택할수 없도록 상영종료 날짜와 오늘 날짜를 비교하여 상영관 선택에 출력
->1번 sql 구문 사용 : Month_between 을 사용하여 결과값이 0보다 작아지면 미출력
->2번 날짜값을 얻어와서 오늘 날짜와 비교후 출력

상영시간표 - ??????????????

좌석 문자열 분리를 통해 값을 비교하여 선택여부 조건은 같은 상영관에 같은 시간 예매(예매 테이블)x

좌석에 따로 예매 여부가능 컬럼 부여 // 상영관도 따로 상영중인지 컬럼 여부 부여

select * from seat where whether = ? AND theater_no = ?


/////////////////////////////////////////////////// 사용 테이블 //////////////////////////////////////////////////////////

예매 (1/23)

CREATE TABLE reservation (
reservation_no int PRIMARY KEY,  		   // 예매 번호 ( 난수 랜덤 생성으로 구현...? 1/25 )
member_idx int REFERENCES member (idx),	     	   // 회원 아이디
movie_id int REFERENCES movie (movie_id),	   // 영화 고유번호
theater_no int REFERENCES theater (theater_no),    // 상영관 번호
seat_no varchar(50) REFERENCES seat (seat_no),     // 좌석 번호
time varhcar(10)				   // 상영시간
);

영화 (1/22)

CREATE TABLE movie (
movie_id int NOT NULL PRIMARY KEY AUTO_INCREMENT,     	  // 영화 고유번호
movie_genre varchar(50) NOT NULL,		      	  // 영화 장르
movie_title varchar(100) NOT NULL,		     	  // 영화 제목
movie_eng_title varchar(100),			     	  // 영화 영제목
movie_like_count int NOT NULL,			     	  // 좋아요 수
movie_director varchar(30) NOT NULL,		      	  // 감독명
movie_cast varchar(100) NOT NULL,   		          // 배우명
movie_basic varchar(100) NOT NULL, 		    	  // 기본정보 (나이제한, 영화 시간)
movie_age int NOT NULL,				      	  // 나이제한
movie_explanation varchar(1000) NOT NULL,	          // 영화 설명
movie_add_date date NOT NULL,			     	  // 글쓴 날짜
release_date date NOT NULL,			     	  // 개봉일
close_date date NOT NULL,  			     	  // 상영종료일
movie_image_name varchar(50) NOT NULL, 		       	  // 포스터이미지이름
movie_image_path varchar(200) NOT NULL,		     	  // 포스터이미지경로 
movie_image_orgname varchar(50) NOT NULL, 	     	  // 포스터이미지원본이름(중복시)	
theater_no int NOT NULL	REFERENCES theater (theater_no)   // 상영할 상영관 번호
);

영화 한줄평 (1/23)

CREATE TABLE movie_comment (
idx int PRIMARY KEY AUTO_INCREMENT,		     // 한줄평 고유번호
id varchar(30) NOT NULL REFERENCES member (idx),     // 아이디
content varchar(100) NOT NULL,                       // 내용 
date date NOT NULL,			             // 날짜
movie_id int NOT NULL REFERENCES movie (movie_id)    // 영화고유번호
);

상영관 (1/23)

CREATE TABLE theater(
theater_no int PRIMARY KEY,	 	  // 상영관 번호
max_seat int REFERENCES seat(seat_no),    // 좌석 번호
use_check int			      	  // 상영관 사용 여부 (0 미사용  /  1 사용)  (1/25)
);

좌석 (1/23)

CREATE TABLE seat (
seat_no int PRIMARY KEY,			  // 좌석 번호
theater_no int REFERENCES theater (theater_no),   // 상영관 번호
use_check int					  // 예약 여부 (0 미사용  /  1 사용)  (1/25)
);


??????????????????????????????????????????????????????

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

갤러리 게시판 (1/16) (게시판삭제 1/23) 

CREATE TABLE categoryBoard (
idx int PRIMARY KEY AUTO_INCREMENT,	    // 글번호
category varchar(20) NOT NULL,		    // 카테고리
id varchar(30) NOT NULL,		    // 글쓴이
title varchar(100) NOT NULL,		    // 글제목
contents varchar(1000) NOT NULL,            // 글내용
wDate date,				    // 글쓴시간
viewCount int,				    // 조회수
originalImgFileName varchar(50) NOT NULL,   // 중복처리전 이미지 이름
imgFileName varchar(50) NOT NULL,	    // 중복처리후 이미지이름
filePath varchar(200) NOT NULL		    // 파일 업로드 경로
);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

자료실 댓글 (1/14)

CREATE TABLE DownloadComment (
idx int PRIMARY KEY AUTO_INCREMENT,	         // 글고유번호
id varchar(30) NOT NULL,			 // 글쓴이
contents varchar(200) NOT NULL,                  // 댓글내용
wTime date NOT NULL,				 // 글쓴시간
pDownBoardIdx int REFERENCES DownloadBoard (idx) // 원글 번호
);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

자료게시판 (1/14)

CREATE TABLE DownloadBoard (
idx int PRIMARY KEY AUTO_INCREMENT,		// 글번호
title varchar(100) NOT NULL,  	       		// 글제목
id varchar(30) NOT NULL,   			// 글쓴이
pass varchar(30) NOT NULL, 			// 비밀번호
contents varchar(1000) NOT NULL,         	// 내용
viewCount int NOT NULL, 	      		// 조회수
wTime date NOT NULL,				// 글쓴시간
originalFileName varchar(100) NOT NULL,		// 업로드 원본 파일명
fileName varchar(100) NOT NULL,			// 중복처리후 파일명
filePath varchar(200) NOT NULL,			// 파일 경로
downloadCount int NOT NULL			// 다운로드 수 (구현 실패)
);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

자유게시판 댓글 (1/13)

CREATE TABLE comment (
idx int PRIMARY KEY AUTO_INCREMENT,			// 고유 댓글 번호
id varchar(30) NOT NULL,				// 글쓴이
contents varchar(200) NOT NULL,                     	// 댓글 내용
wTime date NOT NULL,					// 댓글 쓴시간
pBoardIdx int REFERENCES board (idx)			// 본글 번호
);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

자유게시판 (1/8)

CREATE TABLE board(
idx int PRIMARY KEY AUTO_INCREMENT,  		// 글번호
id varchar(30) NOT NULL REFERENCE member(id),   // 글쓴이
pass varchar(30) NOT NULL, 			// 글쓴이 비밀번호
title varchar(100) NOT NULL,  		    	// 글제목
contents varchar(1000) NOT NULL,                // 글내용
viewCount int NOT NULL, 			// 조회수
wTime date NOT NULL				// 글쓴시간
);

1/8
name => id 컬럼명 변경
1/9
viewNo => viewCount 컬럼명 변경
wTime  NOT NULL 추가 

1/14
id / pass 20 -> 30
title 50 -> 100
contents 500 -> 1000

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

회원 정보 (1/3)		

CREATE TABLE member (
idx int PRIMARY KEY AUTO_INCREMENT,  // 회원 고유번호
id varchar(30) NOT NULL UNIQUE,	     // 회원 아이디
pass varchar(30) NOT NULL,	     // 회원 비밀번호
name varchar(10) NOT NULL,	     // 회원 이름
birth varchar(10) NOT NULL, 	     // 회원 생년월일
gender varchar(10) NOT NULL,         // 회원 성별
email varchar(30),		     // 회원 이메일
phone varchar(11) NOT NULL,	     // 회원 핸드폰
reg_date date NOT NULL,      	     // 가입 날짜
postNo int NOT NULL,	   	     // 우편번호
address varchar(100) NOT NULL,	     // 주소
addressDe varchar(100),  	     // 상세주소
addressRef varchar(20)		     // 참조주소 
);

1/14
id / pass 20 -> 30
email 30 -> 50


